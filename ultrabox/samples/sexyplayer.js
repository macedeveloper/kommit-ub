function get_audio_file(sp_id) {
    return document.getElementById(sp_id);
}


async function preview(sp_id) {
    var audio = get_audio_file(sp_id).getElementsByTagName('audio')[0];
    var audiolist = document.getElementsByTagName('audio')

    Array.from(audiolist).forEach((a) => {
        if (a !== audio) {
            a.pause();
        }
        a.currentTime = 0;
    });
    audio.play();
}


function stopPreview() {
    // Stop all audio players
    document.querySelectorAll('audio').forEach(audio => {
        audio.pause();
        audio.currentTime = 0;
    });
}


function copyLink(sp_id) {
    var button = get_audio_file(sp_id).getElementsByClassName('sexyplayer-btn-copylink')[0];
    var link = get_audio_file(sp_id).getElementsByClassName('sexyplayer-link')[0].textContent;

    var text1 = `<i class="bi bi-clipboard"></i> Copy link`;
    var text2 = `<i class="bi bi-clipboard-check"></i> Copied!`;

    // Copy text to clipboard
    navigator.clipboard.writeText(link)
        .then(() => {
            // Change button text to "Copied!" and make it green
            button.innerHTML = text2;
            button.classList.add('sexyplayer-success');

            // Revert back after 2 seconds
            setTimeout(() => {
                button.innerHTML = text1;
                button.classList.remove('sexyplayer-success');
            }, 1600);
        })
        .catch(err => {
            console.error('Failed to copy: ', err);
        });

    // thank you so much https://github.com/macedeveloper <3
    // no prob :3  ~macedev
}


function downloadFile(playerId) {
    const player = document.getElementById(playerId);
    const link = player.querySelector('.sexyplayer-link').textContent;
    
    // Create a temporary anchor element to trigger download
    const a = document.createElement('a');
    a.href = link;
    a.download = link.substring(link.lastIndexOf('/') + 1);
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
}






// Function to generate audio players from sample data
// Generated by deepseek.com
function generateAudioPlayers(samples) {
    const container = document.getElementById('stupidfuckingcontainer');
    
    // Clear existing content
    container.innerHTML = '';
    
    // Create players for each sample
    samples.forEach((sample, index) => {
        const playerId = `sp${index + 1}`;
        
        // Create the player container
        const playerDiv = document.createElement('div');
        playerDiv.className = 'sexyplayer-container';
        playerDiv.id = playerId;
        
        // Create the title section
        const titleDiv = document.createElement('div');
        titleDiv.className = 'sexyplayer-title';
        
        const nameP = document.createElement('p');
        nameP.className = 'sexyplayer-title';
        nameP.textContent = sample.name;
        
        const lengthP = document.createElement('p');
        lengthP.className = 'sexyplayer-tag';
        lengthP.textContent = sample.length;
        
        const tuneP = document.createElement('p');
        tuneP.className = 'sexyplayer-tag';
        tuneP.textContent = sample.tune;
        
        titleDiv.appendChild(nameP);
        titleDiv.appendChild(lengthP);
        if (sample.tune) {
            titleDiv.appendChild(tuneP);
        }
        
        // Create the link paragraph
        const linkP = document.createElement('p');
        linkP.className = 'sexyplayer-link';
        linkP.textContent = sample.link;
        
        // Create the audio element
        const audioEl = document.createElement('audio');
        audioEl.controls = true;
        
        const sourceEl = document.createElement('source');
        sourceEl.type = 'audio/wav';
        sourceEl.preload = 'none';
        sourceEl.src = sample.link;
        
        audioEl.appendChild(sourceEl);
        
        // Create the buttons container
        const buttonsDiv = document.createElement('div');
        buttonsDiv.className = 'sexyplayer-buttons';
        
        // Play button
        const playBtn = document.createElement('a');
        playBtn.className = 'sexyplayer-btn-play';
        playBtn.innerHTML = '<i class="bi bi-play-fill"></i>';
        playBtn.onclick = () => preview(playerId);
        
        // Stop button
        const stopBtn = document.createElement('a');
        stopBtn.className = 'sexyplayer-btn-stop';
        stopBtn.innerHTML = '<i class="bi bi-stop-fill"></i>';
        stopBtn.onclick = stopPreview;
        
        // Spacer
        const spacer = document.createElement('div');
        spacer.className = 'sexyplayer-spacer';
        
        // Copy link button
        const copyBtn = document.createElement('a');
        copyBtn.className = 'sexyplayer-btn-copylink';
        copyBtn.innerHTML = '<i class="bi bi-clipboard"></i> Copy link';
        copyBtn.onclick = () => copyLink(playerId);
        
        // Download button
        const downloadBtn = document.createElement('a');
        downloadBtn.className = 'sexyplayer-btn-download';
        downloadBtn.innerHTML = '<i class="bi bi-download"></i> Download';
        downloadBtn.onclick = () => downloadFile(playerId);
        
        // Add buttons to container
        buttonsDiv.appendChild(playBtn);
        buttonsDiv.appendChild(stopBtn);
        buttonsDiv.appendChild(spacer);
        buttonsDiv.appendChild(copyBtn);
        buttonsDiv.appendChild(downloadBtn);
        
        // Add all elements to player container
        playerDiv.appendChild(titleDiv);
        playerDiv.appendChild(linkP);
        playerDiv.appendChild(audioEl);
        playerDiv.appendChild(buttonsDiv);
        
        // Add player to the main container
        container.appendChild(playerDiv);
    });
}


// Function to parse legacy HTML and create sample data array
function parseLegacySamples() {
    const container = document.querySelector('.stupidfuckingcontainer');
    const audioFiles = container.querySelectorAll('.audiofile');
    const samples = [];
    
    audioFiles.forEach((file, index) => {
        const p = file.querySelector('p');
        // Extract text content (excluding span and audio elements)
        const textNodes = Array.from(p.childNodes)
            .filter(node => node.nodeType === Node.TEXT_NODE)
            .map(node => node.textContent.trim())
            .join(' ');
            
        // Extract tuning from name if present
        let name = textNodes;
        let tune = null;
        
        // Check if name contains tuning in brackets
        const tuneMatch = name.match(/\[([A-G]#?)\]$/);
        if (tuneMatch) {
            tune = tuneMatch[1];
            name = name.replace(tuneMatch[0], '').trim();
        }
        
        // Get the link
        const link = file.querySelector('.link').textContent;
        
        // Add to samples array
        samples.push({
            name: name,
            length: "0:00", // You might need to calculate this or add it manually
            tune: tune,
            link: link
        });
    });
    
    return samples;
}